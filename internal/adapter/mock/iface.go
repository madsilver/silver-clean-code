// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/iface.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockContextServer is a mock of ContextServer interface.
type MockContextServer struct {
	ctrl     *gomock.Controller
	recorder *MockContextServerMockRecorder
}

// MockContextServerMockRecorder is the mock recorder for MockContextServer.
type MockContextServerMockRecorder struct {
	mock *MockContextServer
}

// NewMockContextServer creates a new mock instance.
func NewMockContextServer(ctrl *gomock.Controller) *MockContextServer {
	mock := &MockContextServer{ctrl: ctrl}
	mock.recorder = &MockContextServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextServer) EXPECT() *MockContextServerMockRecorder {
	return m.recorder
}

// JSON mocks base method.
func (m *MockContextServer) JSON(code int, i any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSON", code, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSON indicates an expected call of JSON.
func (mr *MockContextServerMockRecorder) JSON(code, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContextServer)(nil).JSON), code, i)
}

// Param mocks base method.
func (m *MockContextServer) Param(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockContextServerMockRecorder) Param(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockContextServer)(nil).Param), name)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDB) Add(tableName string, id, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tableName, id, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockDBMockRecorder) Add(tableName, id, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDB)(nil).Add), tableName, id, value)
}

// CreateTable mocks base method.
func (m *MockDB) CreateTable(tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockDBMockRecorder) CreateTable(tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockDB)(nil).CreateTable), tableName)
}

// FindByID mocks base method.
func (m *MockDB) FindByID(table string, id any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", table, id)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDBMockRecorder) FindByID(table, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDB)(nil).FindByID), table, id)
}
