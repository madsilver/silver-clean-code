// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapter/controller/transaction/controller.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	reflect "reflect"
	entity "silver-clean-code/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method.
func (m *MockUseCase) GetTransaction(id uint64) (*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", id)
	ret0, _ := ret[0].(*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockUseCaseMockRecorder) GetTransaction(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockUseCase)(nil).GetTransaction), id)
}

// GetTransactions mocks base method.
func (m *MockUseCase) GetTransactions() ([]*entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions")
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockUseCaseMockRecorder) GetTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockUseCase)(nil).GetTransactions))
}

// SaveTransaction mocks base method.
func (m *MockUseCase) SaveTransaction(transaction *entity.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockUseCaseMockRecorder) SaveTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockUseCase)(nil).SaveTransaction), transaction)
}
